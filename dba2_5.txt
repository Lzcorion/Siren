数据分片
概念: 按特定方式拆分,分散存放到多个数据库服务器上,达到负载效果
垂直分割:单个表切换成多个表,按业务类别分散到不同数据库.
水平分割:将表里的多条记录切分到不同数据库.

搭建数据分片服务器 MyCAT

基于JAVA的分布式
适合大量写入数据的存储需求
分片 高可用集群 读写分离 都可以使用MYCAT
支持MYSQL Oracle Sqlserver Mongodb

分片规则:
枚举法  固定分片 范围约定 求模法 日期列分区法 通配取模 ASCII码求模通配
编程指定 字符串拆分hash 一致性hash

which java
java version
rpm -qa |grep -i jdk
tar -xf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz
mv mycat /usr/local
cd /usr/local
ls /usr/local/mycat
cd conf
改动xml的文件  server.xml scheme.xml rule.xml   .xml扩展标记语言
cp schema.xml   /root/schema.xml
<!--    --> 注释
<    />
<>
</>
server.xml
定义客户端访问56主机时用来连接56的用户名,密码,权限

sechema.xml
做数据分片
dataNode="" 指定的数据节点
rule   指定分片规则
<dataNode> 指定dn1 dn2 dn3 的数据主机和库  
<dataHost>
<writeHost>  指定数据主机的IP地址及授权的IP
rule.xml
记录分片规则

启服务:8066端口
/usr/local/mycat/bin/mycat start   启动服务
/usr/local/mycat/bin/mycat  status  查看mycat状态

测试:  server定义访问主机的用户名和密码.
<user name="root">
                <property name="password">123456</property>
                <property name="schemas">TESTDB</property>   TESTDB 逻辑库.虚拟
登陆50主机. mysql -h192.168.4.56 -uroot -p123456 -P8066
TESTDB库下的表 在schema下定义.
                <table name="employee" primaryKey="ID" dataNode="dn1,dn2,dn3"
                           rule="sharding-by-intfile" />  
###创建表时必须名为employee,表里必须有索引primaryKey字段为ID.
###分片规则为 sharding-by-intfile 枚举 ---> 查看rule.xml
在rule文件里 规定了字段
     <tableRule name="sharding-by-intfile">
                <rule>
                        <columns>sharding_id</columns>  ###规定字段sharding_id
                        <algorithm>hash-int</algorithm> 
                </rule>
         <function name="hash-int"  
                class="io.mycat.route.function.PartitionByFileMap">
                <property name="mapFile">partition-hash-int.txt</property>
        </function>   文件地图对应的文件为partition-hash-int.txt

vim /usr/local/mycat/conf/partition-hash-int.txt   
10000=0对应第1台服务器 
10010=1对应第二台服务器

type="global"   --->在分片服务器上写入数据,后端3台数据库均能查询.

rule="mod-long"  求模算法.  会把id字段的值和对应主机台数取余
<function name="mod-long" class="io.mycat.route.function.PartitionByMod">
                <!-- how many data nodes -->
                <property name="count">3</property>

50主机: mysql -uroot -p123456 -h192.168.4.56 -P8066
mysql> create table TESTDB.hotnews(id int name char(30));
mysql> insert into TESTDB.hotnews(id,name) values(9,"a"),(10,"b"),(11,"c");
取余后 为0的在mysql53 为1的在mysql54 为2的在mysql55






MYSQL性能优化
工作原理:

数据库本身:
- 硬件(CPU/内存/磁盘I/O)
- 查看服务运行的参数.
- 对SQL查询过于复杂
- 网络带宽影响


连接数.连接超时调整   
最大并发连接  max_connections 
set global max_connections=300;  立即生效,重启失效.写入配置文件
vim /etc/my.cnf
[mysqld]
max_connections=300

show global status like "Max_used_connections"   曾经接收过的最大访问量

设置并发量:  曾经最大访问量/最大并发量= 0.85   保留15%应对高并发访问.

connecte_timeout    连接超时时间  默认10s.
wait_timeout       等待超时时间 8小时内没有执行任何操作自动断开.
buffer  单位 字节.  缓存的空间从内存划分。
key_buffer-size  用于MYISAM引擎的索引大小
sort_buffer-_size 排序的大小缓存    order by
thread_cache_size 允许保存在缓存中被重复使用的线程数量 始终有多少个等待用户连接 
(开启过多占用内存空间.)(太少性能降低.要自己创建响应,连接断开后需要杀死程序)
table_open_cache  所有线程同时打开表的数量.

SQL查询优化:   

日志类型: 
错误日志:  /var/log/mysqld.log
查询日志: 能够记录执行所有执行的SQL命令 general-log启用查询日志  当前主机名.log
什么时间访问什么库什么表作什么访问.
慢查询日志: slow-query-log  记录耗时长的查询操作或没有使用索引  
 默认超时时间为10s
binlog日志: 记录SQL命令.

query_cache_type  查看数据库缓存是否开启.
缓存服务(用服务器的物理内存存储数据 varnish squid memcached redis)
query_cache_wlock_invalidate 查询缓存写锁无效OFF 是关闭的
执行写操作时如果正好有客户端执行写操作 那么不会在缓存里查找数据给客户端
show global status like "qcache%";
Qcache_hits     在查询缓存里 查询到1次数据 +1
Qcache_inserts  只要是在查询缓存里查询过的数据,+1

网络架构不合理   调整网络架构


DBA2
mysql 主从同步  
maxscale  数据读写分离(主从同步)
数据分片 (数据的分布式存储)
mysql视图(程序员写)和存储过程(执行多次的重复命令)
mysql多实例(一台机器多个数据库)
mysql性能优化
mysql存储引擎
mHA集群













































